// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HighlightedSearchTokens when given query to render renders correct query 1`] = `
<highlighted-search-tokens__SearchContainer>
  <highlighted-search-tokens__SearchInput
    hasText={true}
  >
    <HotKeyRegion
      autofocus={false}
      registry="connect"
      stopInternalPropagation={true}
    >
      <highlighted-search-tokens__EditorParent
        innerRef={[Function]}
      >
        <DraftEditor
          blockRenderMap={
            Immutable.Map {
              "ordered-list-item": Object {
                "element": "li",
                "wrapper": <ol
                  className="public-DraftStyleDefault-ol"
                />,
              },
              "header-six": Object {
                "element": "h6",
              },
              "header-four": Object {
                "element": "h4",
              },
              "header-one": Object {
                "element": "h1",
              },
              "unordered-list-item": Object {
                "element": "li",
                "wrapper": <ul
                  className="public-DraftStyleDefault-ul"
                />,
              },
              "atomic": Object {
                "element": "figure",
              },
              "unstyled": Object {
                "aliasedElements": Array [
                  "p",
                ],
                "element": "div",
              },
              "header-two": Object {
                "element": "h2",
              },
              "code-block": Object {
                "element": "pre",
                "wrapper": <pre
                  className="public-DraftStyleDefault-pre"
                />,
              },
              "blockquote": Object {
                "element": "blockquote",
              },
              "header-five": Object {
                "element": "h5",
              },
              "header-three": Object {
                "element": "h3",
              },
            }
          }
          blockRendererFn={[Function]}
          blockStyleFn={[Function]}
          editorState={
            EditorState {
              "_immutable": Immutable.Record {
                "allowUndo": true,
                "currentContent": Immutable.Record {
                  "entityMap": Object {},
                  "blockMap": Immutable.OrderedMap {
                    "123": Immutable.Record {
                      "key": "123",
                      "type": "unstyled",
                      "text": "gimme people",
                      "characterList": Immutable.List [
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                      ],
                      "depth": 0,
                      "data": Immutable.Map {},
                    },
                  },
                  "selectionBefore": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                  "selectionAfter": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                },
                "decorator": CompositeDraftDecorator {
                  "_decorators": Array [
                    Object {
                      "component": [Function],
                      "strategy": [Function],
                    },
                  ],
                },
                "directionMap": Immutable.OrderedMap {
                  "123": "LTR",
                },
                "forceSelection": true,
                "inCompositionMode": false,
                "inlineStyleOverride": null,
                "lastChangeType": undefined,
                "nativelyRenderedContent": null,
                "redoStack": Immutable.Stack [],
                "selection": Immutable.Record {
                  "anchorKey": "123",
                  "anchorOffset": 0,
                  "focusKey": "123",
                  "focusOffset": 0,
                  "isBackward": false,
                  "hasFocus": false,
                },
                "treeMap": Immutable.OrderedMap {
                  "123": Immutable.List [
                    Immutable.Record {
                      "start": 0,
                      "end": 12,
                      "decoratorKey": null,
                      "leaves": Immutable.List [
                        Immutable.Record {
                          "start": 0,
                          "end": 12,
                        },
                      ],
                    },
                  ],
                },
                "undoStack": Immutable.Stack [
                  Immutable.Record {
                    "entityMap": Object {
                      "__add": [Function],
                      "__create": [Function],
                      "__get": [Function],
                      "__getLastCreatedEntityKey": [Function],
                      "__mergeData": [Function],
                      "__replaceData": [Function],
                      "add": [Function],
                      "create": [Function],
                      "get": [Function],
                      "getLastCreatedEntityKey": [Function],
                      "mergeData": [Function],
                      "replaceData": [Function],
                    },
                    "blockMap": Immutable.OrderedMap {
                      "123": Immutable.Record {
                        "key": "123",
                        "type": "unstyled",
                        "text": "",
                        "characterList": Immutable.List [],
                        "depth": 0,
                        "data": Immutable.Map {},
                      },
                    },
                    "selectionBefore": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                    "selectionAfter": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                  },
                ],
              },
            }
          }
          handleReturn={[Function]}
          keyBindingFn={[Function]}
          onChange={[Function]}
          placeholder="Search Connections"
          readOnly={false}
          spellCheck={false}
          stripPastedStyles={false}
        />
      </highlighted-search-tokens__EditorParent>
    </HotKeyRegion>
  </highlighted-search-tokens__SearchInput>
  <highlighted-search-tokens__SearchIcon>
    <ClearTextIcon
      onClick={[Function]}
    />
  </highlighted-search-tokens__SearchIcon>
</highlighted-search-tokens__SearchContainer>
`;

exports[`HighlightedSearchTokens when given tokens to render applies entites to tokens 1`] = `
<highlighted-search-tokens__SearchContainer>
  <highlighted-search-tokens__SearchInput
    hasText={true}
  >
    <HotKeyRegion
      autofocus={false}
      registry="connect"
      stopInternalPropagation={true}
    >
      <highlighted-search-tokens__EditorParent
        innerRef={[Function]}
      >
        <DraftEditor
          blockRenderMap={
            Immutable.Map {
              "ordered-list-item": Object {
                "element": "li",
                "wrapper": <ol
                  className="public-DraftStyleDefault-ol"
                />,
              },
              "header-six": Object {
                "element": "h6",
              },
              "header-four": Object {
                "element": "h4",
              },
              "header-one": Object {
                "element": "h1",
              },
              "unordered-list-item": Object {
                "element": "li",
                "wrapper": <ul
                  className="public-DraftStyleDefault-ul"
                />,
              },
              "atomic": Object {
                "element": "figure",
              },
              "unstyled": Object {
                "aliasedElements": Array [
                  "p",
                ],
                "element": "div",
              },
              "header-two": Object {
                "element": "h2",
              },
              "code-block": Object {
                "element": "pre",
                "wrapper": <pre
                  className="public-DraftStyleDefault-pre"
                />,
              },
              "blockquote": Object {
                "element": "blockquote",
              },
              "header-five": Object {
                "element": "h5",
              },
              "header-three": Object {
                "element": "h3",
              },
            }
          }
          blockRendererFn={[Function]}
          blockStyleFn={[Function]}
          editorState={
            EditorState {
              "_immutable": Immutable.Record {
                "allowUndo": true,
                "currentContent": Immutable.Record {
                  "entityMap": Object {},
                  "blockMap": Immutable.OrderedMap {
                    "123": Immutable.Record {
                      "key": "123",
                      "type": "unstyled",
                      "text": "connectors a Trove",
                      "characterList": Immutable.List [
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                      ],
                      "depth": 0,
                      "data": Immutable.Map {},
                    },
                  },
                  "selectionBefore": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                  "selectionAfter": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                },
                "decorator": CompositeDraftDecorator {
                  "_decorators": Array [
                    Object {
                      "component": [Function],
                      "strategy": [Function],
                    },
                  ],
                },
                "directionMap": Immutable.OrderedMap {
                  "123": "LTR",
                },
                "forceSelection": true,
                "inCompositionMode": false,
                "inlineStyleOverride": null,
                "lastChangeType": undefined,
                "nativelyRenderedContent": null,
                "redoStack": Immutable.Stack [],
                "selection": Immutable.Record {
                  "anchorKey": "123",
                  "anchorOffset": 0,
                  "focusKey": "123",
                  "focusOffset": 0,
                  "isBackward": false,
                  "hasFocus": false,
                },
                "treeMap": Immutable.OrderedMap {
                  "123": Immutable.List [
                    Immutable.Record {
                      "start": 0,
                      "end": 18,
                      "decoratorKey": null,
                      "leaves": Immutable.List [
                        Immutable.Record {
                          "start": 0,
                          "end": 18,
                        },
                      ],
                    },
                  ],
                },
                "undoStack": Immutable.Stack [
                  Immutable.Record {
                    "entityMap": Object {
                      "__add": [Function],
                      "__create": [Function],
                      "__get": [Function],
                      "__getLastCreatedEntityKey": [Function],
                      "__mergeData": [Function],
                      "__replaceData": [Function],
                      "add": [Function],
                      "create": [Function],
                      "get": [Function],
                      "getLastCreatedEntityKey": [Function],
                      "mergeData": [Function],
                      "replaceData": [Function],
                    },
                    "blockMap": Immutable.OrderedMap {
                      "123": Immutable.Record {
                        "key": "123",
                        "type": "unstyled",
                        "text": "",
                        "characterList": Immutable.List [],
                        "depth": 0,
                        "data": Immutable.Map {},
                      },
                    },
                    "selectionBefore": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                    "selectionAfter": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                  },
                ],
              },
            }
          }
          handleReturn={[Function]}
          keyBindingFn={[Function]}
          onChange={[Function]}
          placeholder="Search Connections"
          readOnly={false}
          spellCheck={false}
          stripPastedStyles={false}
        />
      </highlighted-search-tokens__EditorParent>
    </HotKeyRegion>
  </highlighted-search-tokens__SearchInput>
  <highlighted-search-tokens__SearchIcon>
    <ClearTextIcon
      onClick={[Function]}
    />
  </highlighted-search-tokens__SearchIcon>
</highlighted-search-tokens__SearchContainer>
`;

exports[`HighlightedSearchTokens when highlighting applies new token entity to selected area 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [
        Object {
          "key": 0,
          "length": 5,
          "offset": 0,
        },
      ],
      "inlineStyleRanges": Array [],
      "key": "123",
      "text": "connectors a Trove",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {
    "0": Object {
      "data": Object {
        "token": Object {
          "category": "new_token",
          "end": 5,
          "start": 0,
          "token": "conne",
        },
      },
      "mutability": "MUTABLE",
      "type": "TOKEN",
    },
  },
}
`;

exports[`HighlightedSearchTokens when modifying query with tokens changes entity category 1`] = `
Object {
  "0": Object {
    "data": Object {
      "onHandleMouseDown": [Function],
      "token": Object {
        "category": "internal_tag",
        "end": 10,
        "start": 0,
        "token": "connectors",
      },
    },
    "mutability": "MUTABLE",
    "type": "TOKEN",
  },
  "1": Object {
    "data": Object {
      "onHandleMouseDown": [Function],
      "token": Object {
        "category": "user_name",
        "end": 18,
        "start": 13,
        "token": "Trove",
      },
    },
    "mutability": "MUTABLE",
    "type": "TOKEN",
  },
}
`;

exports[`HighlightedSearchTokens when modifying query with tokens renders applied entites 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [
        Object {
          "key": 0,
          "length": 10,
          "offset": 0,
        },
        Object {
          "key": 1,
          "length": 5,
          "offset": 13,
        },
      ],
      "inlineStyleRanges": Array [],
      "key": "123",
      "text": "connectors a Trove",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {
    "0": Object {
      "data": Object {
        "onHandleMouseDown": [Function],
        "token": Object {
          "category": "internal_tag",
          "end": 10,
          "start": 0,
          "token": "connectors",
        },
      },
      "mutability": "MUTABLE",
      "type": "TOKEN",
    },
    "1": Object {
      "data": Object {
        "onHandleMouseDown": [Function],
        "token": Object {
          "category": "company",
          "end": 18,
          "start": 13,
          "token": "Trove",
        },
      },
      "mutability": "MUTABLE",
      "type": "TOKEN",
    },
  },
}
`;

exports[`HighlightedSearchTokens when resizing tokens updateTokenEntity returns editorState with new token 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [
        Object {
          "key": 0,
          "length": 7,
          "offset": 0,
        },
      ],
      "inlineStyleRanges": Array [],
      "key": "123",
      "text": "connectors",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {
    "0": Object {
      "data": Object {
        "onHandleMouseDown": [Function],
        "token": Object {
          "category": "internal_tag",
          "end": 10,
          "start": 0,
          "token": "connectors",
        },
      },
      "mutability": "MUTABLE",
      "type": "TOKEN",
    },
  },
}
`;

exports[`HighlightedSearchTokens when searchLoading is true renders a loading state 1`] = `
<highlighted-search-tokens__SearchContainer>
  <highlighted-search-tokens__SearchInput
    hasText={true}
  >
    <HotKeyRegion
      autofocus={false}
      registry="connect"
      stopInternalPropagation={true}
    >
      <highlighted-search-tokens__EditorParent
        innerRef={[Function]}
      >
        <DraftEditor
          blockRenderMap={
            Immutable.Map {
              "ordered-list-item": Object {
                "element": "li",
                "wrapper": <ol
                  className="public-DraftStyleDefault-ol"
                />,
              },
              "header-six": Object {
                "element": "h6",
              },
              "header-four": Object {
                "element": "h4",
              },
              "header-one": Object {
                "element": "h1",
              },
              "unordered-list-item": Object {
                "element": "li",
                "wrapper": <ul
                  className="public-DraftStyleDefault-ul"
                />,
              },
              "atomic": Object {
                "element": "figure",
              },
              "unstyled": Object {
                "aliasedElements": Array [
                  "p",
                ],
                "element": "div",
              },
              "header-two": Object {
                "element": "h2",
              },
              "code-block": Object {
                "element": "pre",
                "wrapper": <pre
                  className="public-DraftStyleDefault-pre"
                />,
              },
              "blockquote": Object {
                "element": "blockquote",
              },
              "header-five": Object {
                "element": "h5",
              },
              "header-three": Object {
                "element": "h3",
              },
            }
          }
          blockRendererFn={[Function]}
          blockStyleFn={[Function]}
          editorState={
            EditorState {
              "_immutable": Immutable.Record {
                "allowUndo": true,
                "currentContent": Immutable.Record {
                  "entityMap": Object {},
                  "blockMap": Immutable.OrderedMap {
                    "123": Immutable.Record {
                      "key": "123",
                      "type": "unstyled",
                      "text": "gimme people",
                      "characterList": Immutable.List [
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                        Immutable.Record {
                          "style": Immutable.OrderedSet [],
                          "entity": null,
                        },
                      ],
                      "depth": 0,
                      "data": Immutable.Map {},
                    },
                  },
                  "selectionBefore": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                  "selectionAfter": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                },
                "decorator": CompositeDraftDecorator {
                  "_decorators": Array [
                    Object {
                      "component": [Function],
                      "strategy": [Function],
                    },
                  ],
                },
                "directionMap": Immutable.OrderedMap {
                  "123": "LTR",
                },
                "forceSelection": true,
                "inCompositionMode": false,
                "inlineStyleOverride": null,
                "lastChangeType": undefined,
                "nativelyRenderedContent": null,
                "redoStack": Immutable.Stack [],
                "selection": Immutable.Record {
                  "anchorKey": "123",
                  "anchorOffset": 0,
                  "focusKey": "123",
                  "focusOffset": 0,
                  "isBackward": false,
                  "hasFocus": false,
                },
                "treeMap": Immutable.OrderedMap {
                  "123": Immutable.List [
                    Immutable.Record {
                      "start": 0,
                      "end": 12,
                      "decoratorKey": null,
                      "leaves": Immutable.List [
                        Immutable.Record {
                          "start": 0,
                          "end": 12,
                        },
                      ],
                    },
                  ],
                },
                "undoStack": Immutable.Stack [
                  Immutable.Record {
                    "entityMap": Object {
                      "__add": [Function],
                      "__create": [Function],
                      "__get": [Function],
                      "__getLastCreatedEntityKey": [Function],
                      "__mergeData": [Function],
                      "__replaceData": [Function],
                      "add": [Function],
                      "create": [Function],
                      "get": [Function],
                      "getLastCreatedEntityKey": [Function],
                      "mergeData": [Function],
                      "replaceData": [Function],
                    },
                    "blockMap": Immutable.OrderedMap {
                      "123": Immutable.Record {
                        "key": "123",
                        "type": "unstyled",
                        "text": "",
                        "characterList": Immutable.List [],
                        "depth": 0,
                        "data": Immutable.Map {},
                      },
                    },
                    "selectionBefore": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                    "selectionAfter": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                  },
                ],
              },
            }
          }
          handleReturn={[Function]}
          keyBindingFn={[Function]}
          onChange={[Function]}
          placeholder="Search Connections"
          readOnly={false}
          spellCheck={false}
          stripPastedStyles={false}
        />
      </highlighted-search-tokens__EditorParent>
    </HotKeyRegion>
  </highlighted-search-tokens__SearchInput>
  <highlighted-search-tokens__SearchIcon>
    <ClearTextIcon
      onClick={[Function]}
    />
  </highlighted-search-tokens__SearchIcon>
</highlighted-search-tokens__SearchContainer>
`;

exports[`HighlightedSearchTokens when there is no query renders a search icon button 1`] = `
<highlighted-search-tokens__SearchContainer>
  <highlighted-search-tokens__SearchInput
    hasText={false}
  >
    <HotKeyRegion
      autofocus={false}
      registry="connect"
      stopInternalPropagation={true}
    >
      <highlighted-search-tokens__EditorParent
        innerRef={[Function]}
      >
        <DraftEditor
          blockRenderMap={
            Immutable.Map {
              "ordered-list-item": Object {
                "element": "li",
                "wrapper": <ol
                  className="public-DraftStyleDefault-ol"
                />,
              },
              "header-six": Object {
                "element": "h6",
              },
              "header-four": Object {
                "element": "h4",
              },
              "header-one": Object {
                "element": "h1",
              },
              "unordered-list-item": Object {
                "element": "li",
                "wrapper": <ul
                  className="public-DraftStyleDefault-ul"
                />,
              },
              "atomic": Object {
                "element": "figure",
              },
              "unstyled": Object {
                "aliasedElements": Array [
                  "p",
                ],
                "element": "div",
              },
              "header-two": Object {
                "element": "h2",
              },
              "code-block": Object {
                "element": "pre",
                "wrapper": <pre
                  className="public-DraftStyleDefault-pre"
                />,
              },
              "blockquote": Object {
                "element": "blockquote",
              },
              "header-five": Object {
                "element": "h5",
              },
              "header-three": Object {
                "element": "h3",
              },
            }
          }
          blockRendererFn={[Function]}
          blockStyleFn={[Function]}
          editorState={
            EditorState {
              "_immutable": Immutable.Record {
                "allowUndo": true,
                "currentContent": Immutable.Record {
                  "entityMap": Object {},
                  "blockMap": Immutable.OrderedMap {
                    "123": Immutable.Record {
                      "key": "123",
                      "type": "unstyled",
                      "text": "",
                      "characterList": Immutable.List [],
                      "depth": 0,
                      "data": Immutable.Map {},
                    },
                  },
                  "selectionBefore": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                  "selectionAfter": Immutable.Record {
                    "anchorKey": "123",
                    "anchorOffset": 0,
                    "focusKey": "123",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                },
                "decorator": CompositeDraftDecorator {
                  "_decorators": Array [
                    Object {
                      "component": [Function],
                      "strategy": [Function],
                    },
                  ],
                },
                "directionMap": Immutable.OrderedMap {
                  "123": "LTR",
                },
                "forceSelection": true,
                "inCompositionMode": false,
                "inlineStyleOverride": null,
                "lastChangeType": undefined,
                "nativelyRenderedContent": null,
                "redoStack": Immutable.Stack [],
                "selection": Immutable.Record {
                  "anchorKey": "123",
                  "anchorOffset": 0,
                  "focusKey": "123",
                  "focusOffset": 0,
                  "isBackward": false,
                  "hasFocus": false,
                },
                "treeMap": Immutable.OrderedMap {
                  "123": Immutable.List [
                    Immutable.Record {
                      "start": 0,
                      "end": 0,
                      "decoratorKey": null,
                      "leaves": Immutable.List [
                        Immutable.Record {
                          "start": 0,
                          "end": 0,
                        },
                      ],
                    },
                  ],
                },
                "undoStack": Immutable.Stack [
                  Immutable.Record {
                    "entityMap": Object {
                      "__add": [Function],
                      "__create": [Function],
                      "__get": [Function],
                      "__getLastCreatedEntityKey": [Function],
                      "__mergeData": [Function],
                      "__replaceData": [Function],
                      "add": [Function],
                      "create": [Function],
                      "get": [Function],
                      "getLastCreatedEntityKey": [Function],
                      "mergeData": [Function],
                      "replaceData": [Function],
                    },
                    "blockMap": Immutable.OrderedMap {
                      "123": Immutable.Record {
                        "key": "123",
                        "type": "unstyled",
                        "text": "",
                        "characterList": Immutable.List [],
                        "depth": 0,
                        "data": Immutable.Map {},
                      },
                    },
                    "selectionBefore": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                    "selectionAfter": Immutable.Record {
                      "anchorKey": "123",
                      "anchorOffset": 0,
                      "focusKey": "123",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                  },
                ],
              },
            }
          }
          handleReturn={[Function]}
          keyBindingFn={[Function]}
          onChange={[Function]}
          placeholder="Search Connections"
          readOnly={false}
          spellCheck={false}
          stripPastedStyles={false}
        />
      </highlighted-search-tokens__EditorParent>
    </HotKeyRegion>
  </highlighted-search-tokens__SearchInput>
  <highlighted-search-tokens__SearchIcon>
    <InjectSVG
      containerOnClick={[Function]}
      path="send-32-inactive.svg"
      svgFolder="svg/optimized"
    />
  </highlighted-search-tokens__SearchIcon>
</highlighted-search-tokens__SearchContainer>
`;
